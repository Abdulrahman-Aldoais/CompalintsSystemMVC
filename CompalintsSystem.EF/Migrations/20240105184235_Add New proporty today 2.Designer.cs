// <auto-generated />
using System;
using CompalintsSystem.EF.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompalintsSystem.EF.Migrations
{
    [DbContext(typeof(AppCompalintsContextDB))]
    [Migration("20240105184235_Add New proporty today 2")]
    partial class AddNewproportytoday2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompalintsSystem.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CollegesId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int>("SubDepartmentsId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("originatorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollegesId");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SubDepartmentsId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Colleges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Collegess");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "كلية الطب "
                        },
                        new
                        {
                            Id = 2,
                            Name = " كلية الهندسة"
                        },
                        new
                        {
                            Id = 4,
                            Name = " جميع الكليات"
                        },
                        new
                        {
                            Id = 5,
                            Name = "زائر "
                        },
                        new
                        {
                            Id = 3,
                            Name = "كلية التربية"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Compalints_Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentSolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSolution")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonWhySolutionRejected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionProvIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionProvName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadsComplainteId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadsComplainteId");

                    b.HasIndex("UserId");

                    b.ToTable("Compalints_Solutions");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.ComplaintsRejected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSolution")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedProvName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedUserProvIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadsComplainteId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UploadsComplainteId");

                    b.HasIndex("UserId");

                    b.ToTable("ComplaintsRejecteds");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollegesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollegesId");

                    b.ToTable("Departmentss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollegesId = 1,
                            Name = "الطب البشري"
                        },
                        new
                        {
                            Id = 9,
                            CollegesId = 1,
                            Name = "المختبرات"
                        },
                        new
                        {
                            Id = 10,
                            CollegesId = 1,
                            Name = "التمريض"
                        },
                        new
                        {
                            Id = 11,
                            CollegesId = 2,
                            Name = "نظم معلومات"
                        },
                        new
                        {
                            Id = 12,
                            CollegesId = 2,
                            Name = "امن سيبراني"
                        },
                        new
                        {
                            Id = 13,
                            CollegesId = 2,
                            Name = "هندسة معماري"
                        },
                        new
                        {
                            Id = 2,
                            CollegesId = 2,
                            Name = "علوم حاسوب"
                        },
                        new
                        {
                            Id = 5,
                            CollegesId = 2,
                            Name = "هندسة مدني"
                        },
                        new
                        {
                            Id = 3,
                            CollegesId = 1,
                            Name = "صيدلة"
                        },
                        new
                        {
                            Id = 6,
                            CollegesId = 3,
                            Name = "فيزياء"
                        },
                        new
                        {
                            Id = 7,
                            CollegesId = 4,
                            Name = "جميع الاقسام"
                        },
                        new
                        {
                            Id = 8,
                            CollegesId = 5,
                            Name = "زئر"
                        },
                        new
                        {
                            Id = 4,
                            CollegesId = 3,
                            Name = "قران"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficiarieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSubmeted")
                        .HasColumnType("datetime2")
                        .HasComment("تحديد وقت ادخال الصف في قاعدية البيانات");

                    b.Property<string>("DescProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitileProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Society", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Societys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "الملتقى"
                        },
                        new
                        {
                            Id = 2,
                            Name = "شئون الطلاب"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ادارة عامة"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.StagesComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StagesComplaints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "موظف الشكوى"
                        },
                        new
                        {
                            Id = 2,
                            Name = "رئيس القسم"
                        },
                        new
                        {
                            Id = 3,
                            Name = "عميد الكلية"
                        },
                        new
                        {
                            Id = 4,
                            Name = "رئاسة الجامعة"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.StatusCompalint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusCompalints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "جديدة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "محلولة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "مرفوضة"
                        },
                        new
                        {
                            Id = 4,
                            Name = "معلقة"
                        },
                        new
                        {
                            Id = 5,
                            Name = "مرفوعة"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.SubDepartments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.ToTable("SubDepartmentss");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentsId = 1,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 15,
                            DepartmentsId = 1,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 16,
                            DepartmentsId = 1,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 17,
                            DepartmentsId = 1,
                            Name = " الخامس"
                        },
                        new
                        {
                            Id = 18,
                            DepartmentsId = 1,
                            Name = " السادس"
                        },
                        new
                        {
                            Id = 19,
                            DepartmentsId = 1,
                            Name = " السابع"
                        },
                        new
                        {
                            Id = 20,
                            DepartmentsId = 1,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentsId = 1,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentsId = 2,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 21,
                            DepartmentsId = 2,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 22,
                            DepartmentsId = 2,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentsId = 2,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentsId = 3,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentsId = 3,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 23,
                            DepartmentsId = 3,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 24,
                            DepartmentsId = 3,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentsId = 4,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentsId = 4,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 10,
                            DepartmentsId = 5,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 11,
                            DepartmentsId = 5,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 25,
                            DepartmentsId = 5,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 26,
                            DepartmentsId = 5,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 27,
                            DepartmentsId = 9,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 28,
                            DepartmentsId = 9,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 29,
                            DepartmentsId = 9,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 30,
                            DepartmentsId = 9,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 31,
                            DepartmentsId = 9,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 32,
                            DepartmentsId = 10,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 33,
                            DepartmentsId = 10,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 34,
                            DepartmentsId = 10,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 35,
                            DepartmentsId = 10,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 36,
                            DepartmentsId = 10,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 37,
                            DepartmentsId = 10,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 38,
                            DepartmentsId = 11,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 39,
                            DepartmentsId = 11,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 40,
                            DepartmentsId = 11,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 41,
                            DepartmentsId = 11,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 42,
                            DepartmentsId = 11,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 43,
                            DepartmentsId = 12,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 44,
                            DepartmentsId = 12,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 45,
                            DepartmentsId = 12,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 46,
                            DepartmentsId = 12,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 47,
                            DepartmentsId = 12,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 48,
                            DepartmentsId = 13,
                            Name = " الاول"
                        },
                        new
                        {
                            Id = 49,
                            DepartmentsId = 13,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 50,
                            DepartmentsId = 13,
                            Name = " الثالث"
                        },
                        new
                        {
                            Id = 51,
                            DepartmentsId = 13,
                            Name = " الرابع"
                        },
                        new
                        {
                            Id = 52,
                            DepartmentsId = 13,
                            Name = " خريج"
                        },
                        new
                        {
                            Id = 12,
                            DepartmentsId = 6,
                            Name = " الثاني"
                        },
                        new
                        {
                            Id = 13,
                            DepartmentsId = 7,
                            Name = " جميع المستويات"
                        },
                        new
                        {
                            Id = 14,
                            DepartmentsId = 8,
                            Name = " لا يوجد"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentsId = 6,
                            Name = "الاول"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.TypeCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersNameAddType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeCommunications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 5, 21, 42, 33, 230, DateTimeKind.Local).AddTicks(8532),
                            Type = "تماطل",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 5, 21, 42, 33, 230, DateTimeKind.Local).AddTicks(8556),
                            Type = "تلاعب بالحلول",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.TypeComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersNameAddType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeComplaints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 5, 21, 42, 33, 231, DateTimeKind.Local).AddTicks(6525),
                            Type = "مالية",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 5, 21, 42, 33, 231, DateTimeKind.Local).AddTicks(7113),
                            Type = "فساد",
                            UsersNameAddType = "قيمة افتراضية من النضام"
                        });
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UpComplaintCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateUp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpProvName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpUserProvIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadsComplainteId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadsComplainteId");

                    b.HasIndex("UserId");

                    b.ToTable("UpComplaintCauses");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UploadsComplainte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CollegesId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("DescComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropBeneficiarie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int>("StagesComplaintId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCompalintId")
                        .HasColumnType("int");

                    b.Property<int>("SubDepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("TitleComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Today")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CollegesId");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("StagesComplaintId");

                    b.HasIndex("StatusCompalintId");

                    b.HasIndex("SubDepartmentsId");

                    b.HasIndex("TypeComplaintId");

                    b.ToTable("UploadsComplaintes");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UsersCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BenfPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollegesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int>("SubDepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Titile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCommuncationId")
                        .HasColumnType("int");

                    b.Property<string>("reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reportSubmitterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reportSubmitterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reporteeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollegesId");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("SubDepartmentsId");

                    b.HasIndex("TypeCommuncationId");

                    b.HasIndex("reportSubmitterId");

                    b.ToTable("UsersCommunications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2e803883-c018-4f7c-90e3-c3c1db0d8f00",
                            ConcurrencyStamp = "23452499-7786-495c-8119-81980b0f9084",
                            Name = "AdminGeneralFederation",
                            NormalizedName = "ADMINGENERALFEDERATION"
                        },
                        new
                        {
                            Id = "7f95d3fd-8840-466e-9da6-d7dcf06298de",
                            ConcurrencyStamp = "4fc8e01e-f90e-457f-80e6-21bb687e2aa8",
                            Name = "AdminColleges",
                            NormalizedName = "ADMINCOLLEGES"
                        },
                        new
                        {
                            Id = "81b7a93d-4221-4d50-884c-08d98676a9c8",
                            ConcurrencyStamp = "714454ee-dd62-4c69-9e74-e6873cd039fb",
                            Name = "AdminDepartments",
                            NormalizedName = "ADMINDEPARTMENTS"
                        },
                        new
                        {
                            Id = "64a8ff4a-f4a2-405c-9c1a-85f0f9f46145",
                            ConcurrencyStamp = "0447c4d2-5de9-45a4-8db6-8f213b519786",
                            Name = "AdminSubDepartments",
                            NormalizedName = "ADMINSUBDEPARTMENTS"
                        },
                        new
                        {
                            Id = "8faa31eb-ded0-4711-8e0b-0f509c4b332f",
                            ConcurrencyStamp = "c29d9fb7-0096-4f4f-8592-b03d9dfa077d",
                            Name = "Beneficiarie",
                            NormalizedName = "BENEFICIARIE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.Colleges", "Colleges")
                        .WithMany("Users")
                        .HasForeignKey("CollegesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.Departments", "Departments")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.Society", "Societies")
                        .WithMany("Users")
                        .HasForeignKey("SocietyId");

                    b.HasOne("CompalintsSystem.Core.Models.SubDepartments", "SubDepartments")
                        .WithMany("Users")
                        .HasForeignKey("SubDepartmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Colleges");

                    b.Navigation("Departments");

                    b.Navigation("Societies");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Compalints_Solution", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.UploadsComplainte", "CompalintsHasSolution")
                        .WithMany("Compalints_Solutions")
                        .HasForeignKey("UploadsComplainteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", "UserAddSolution")
                        .WithMany("Compalints_Solutions")
                        .HasForeignKey("UserId");

                    b.Navigation("CompalintsHasSolution");

                    b.Navigation("UserAddSolution");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.ComplaintsRejected", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.UploadsComplainte", "CompalintsRejected")
                        .WithMany("ComplaintsRejecteds")
                        .HasForeignKey("UploadsComplainteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", "UserRejectComplaint")
                        .WithMany("ComplaintsRejecteds")
                        .HasForeignKey("UserId");

                    b.Navigation("CompalintsRejected");

                    b.Navigation("UserRejectComplaint");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Departments", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.Colleges", "Colleges")
                        .WithMany("Departmentss")
                        .HasForeignKey("CollegesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colleges");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.SubDepartments", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.Departments", "Departments")
                        .WithMany("SubDepartmentss")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UpComplaintCause", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.UploadsComplainte", "CompalintUp")
                        .WithMany("ComplaintsUp")
                        .HasForeignKey("UploadsComplainteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", "UserUpComplaint")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CompalintUp");

                    b.Navigation("UserUpComplaint");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UploadsComplainte", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", null)
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CompalintsSystem.Core.Models.Colleges", "Colleges")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("CollegesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.Departments", "Departments")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId");

                    b.HasOne("CompalintsSystem.Core.Models.StagesComplaint", "StagesComplaint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("StagesComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.StatusCompalint", "StatusCompalint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("StatusCompalintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.SubDepartments", "SubDepartments")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("SubDepartmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.TypeComplaint", "TypeComplaint")
                        .WithMany("UploadsComplaintes")
                        .HasForeignKey("TypeComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colleges");

                    b.Navigation("Departments");

                    b.Navigation("Society");

                    b.Navigation("StagesComplaint");

                    b.Navigation("StatusCompalint");

                    b.Navigation("SubDepartments");

                    b.Navigation("TypeComplaint");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UsersCommunication", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.Colleges", "Colleges")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("CollegesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.Departments", "Departments")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.SubDepartments", "SubDepartments")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("SubDepartmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.TypeCommunication", "TypeCommunication")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("TypeCommuncationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", "reportSubmitter")
                        .WithMany("UsersCommunications")
                        .HasForeignKey("reportSubmitterId");

                    b.Navigation("Colleges");

                    b.Navigation("Departments");

                    b.Navigation("reportSubmitter");

                    b.Navigation("SubDepartments");

                    b.Navigation("TypeCommunication");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CompalintsSystem.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("Compalints_Solutions");

                    b.Navigation("ComplaintsRejecteds");

                    b.Navigation("UploadsComplaintes");

                    b.Navigation("UserRoles");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Colleges", b =>
                {
                    b.Navigation("Departmentss");

                    b.Navigation("UploadsComplaintes");

                    b.Navigation("Users");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Departments", b =>
                {
                    b.Navigation("SubDepartmentss");

                    b.Navigation("UploadsComplaintes");

                    b.Navigation("Users");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.Society", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.StagesComplaint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.StatusCompalint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.SubDepartments", b =>
                {
                    b.Navigation("UploadsComplaintes");

                    b.Navigation("Users");

                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.TypeCommunication", b =>
                {
                    b.Navigation("UsersCommunications");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.TypeComplaint", b =>
                {
                    b.Navigation("UploadsComplaintes");
                });

            modelBuilder.Entity("CompalintsSystem.Core.Models.UploadsComplainte", b =>
                {
                    b.Navigation("Compalints_Solutions");

                    b.Navigation("ComplaintsRejecteds");

                    b.Navigation("ComplaintsUp");
                });
#pragma warning restore 612, 618
        }
    }
}
